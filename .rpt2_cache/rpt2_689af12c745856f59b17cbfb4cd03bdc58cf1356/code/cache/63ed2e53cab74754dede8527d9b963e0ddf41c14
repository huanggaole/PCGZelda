{
  "code": "import Character, { CharacterAction } from \"./Character\";\r\nimport EnemyFactory from \"../map/EnemyFactory\";\r\nimport BulletFactory from \"../map/BulletFactory\";\r\nimport { PlayerArrow } from \"../bullet/PlayerArrow\";\r\nimport BattleScene from \"../scene/BattleScene\";\r\nimport { NodeType } from \"../script/Node\";\r\nexport default class Player extends Character {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.attacktick = 0;\r\n        this.attackInterval = 20;\r\n        this.attackPre = 2;\r\n        this.attackAft = 5;\r\n    }\r\n    onUpdate() {\r\n        super.onUpdate();\r\n        for (let i = 0; i < BattleScene.hearts.length; i++) {\r\n            if (this.maxHP / 4.0 <= i) {\r\n                BattleScene.hearts[i].visible = false;\r\n            }\r\n            else {\r\n                BattleScene.hearts[i].visible = true;\r\n                if (this.HP / 4.0 >= i + 1) {\r\n                    BattleScene.hearts[i].index = 0;\r\n                }\r\n                else if (this.HP / 4.0 < i) {\r\n                    BattleScene.hearts[i].index = 4;\r\n                }\r\n                else {\r\n                    BattleScene.hearts[i].index = Math.round(4 - (this.HP / 4.0 - i) * 4);\r\n                }\r\n            }\r\n        }\r\n        if (this.x == 0 && this.y == 0) {\r\n            this.attacktick++;\r\n            if (this.action != CharacterAction.Attack) {\r\n                this.action = CharacterAction.Attack;\r\n                this.attacktick = 0;\r\n            }\r\n            if (this.attacktick < this.attackInterval) {\r\n                let res = this.onAttackWait();\r\n                if (!res) {\r\n                    let tmpregion = BattleScene.regionmap[BattleScene.tmpMapY][BattleScene.tmpMapX];\r\n                    if (tmpregion.node.type == NodeType.k) {\r\n                        Laya.timer.once(500, this, () => {\r\n                            alert(\"你获得了\" + tmpregion.node.keyTo[0] + \"号钥匙，\" + tmpregion.node.keyTo[0] + \"号关卡的守卫已经离开了！\");\r\n                        });\r\n                        tmpregion.node.type = NodeType.t;\r\n                        for (let i = 0; i < BattleScene.regionmap.length; i++) {\r\n                            for (let j = 0; j < BattleScene.regionmap[i].length; j++) {\r\n                                if (BattleScene.regionmap[i][j] && BattleScene.regionmap[i][j].node.index == tmpregion.node.keyTo[0]) {\r\n                                    BattleScene.regionmap[i][j].node.type = NodeType.t;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.attacktick--;\r\n                }\r\n            }\r\n            else if (this.attacktick < this.attackInterval + this.attackPre) {\r\n                this.onAttackPre();\r\n            }\r\n            else if (this.attacktick == this.attackInterval + this.attackPre) {\r\n                this.onAttackAft();\r\n                this.doShoot();\r\n            }\r\n            else if (this.attacktick < this.attackInterval + this.attackPre + this.attackAft) {\r\n                this.onAttackAft();\r\n            }\r\n            else {\r\n                this.attacktick = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.action = CharacterAction.Walk;\r\n        }\r\n        this.doMove();\r\n    }\r\n    onAttackWait() {\r\n        let index = -1;\r\n        let enemyx = -1;\r\n        let enemyy = -1;\r\n        let mindist = 999999;\r\n        let owner = this.owner;\r\n        for (let i = 0; i < EnemyFactory.enemylist.length; i++) {\r\n            let enemy = EnemyFactory.enemylist[i];\r\n            let enemyHP = EnemyFactory.enemylist[i].getComponent(Character).HP;\r\n            if (enemyHP > 0) {\r\n                let delx = enemy.x - owner.x;\r\n                let dely = enemy.y - owner.y;\r\n                let newdist = Math.sqrt(delx * delx + dely * dely);\r\n                if (newdist < mindist) {\r\n                    index = i;\r\n                    enemyx = enemy.x;\r\n                    enemyy = enemy.y;\r\n                    mindist = newdist;\r\n                }\r\n            }\r\n        }\r\n        if (index == -1) {\r\n            return false;\r\n        }\r\n        let dirx = enemyx - owner.x;\r\n        let diry = enemyy - owner.y;\r\n        let mod = Math.sqrt(dirx * dirx + diry * diry);\r\n        this.dirx = dirx / mod;\r\n        this.diry = diry / mod;\r\n        this.doTurnAround();\r\n        return true;\r\n    }\r\n    onAttackPre() {\r\n        this.owner.value = Character.Values[4][this.directindex];\r\n    }\r\n    onAttackAft() {\r\n        this.owner.value = Character.Values[5][this.directindex];\r\n    }\r\n    doShoot() {\r\n        let owner = this.owner;\r\n        BulletFactory.initBullet(PlayerArrow, owner.x, owner.y, this.dirx, this.diry);\r\n    }\r\n}\r\nPlayer.Level = 1;\r\nPlayer.exp = 0;\r\nPlayer.maxExp = 10;\r\n",
  "references": [
    "/Users/huanggaole/PCGZelda/src/character/Character.ts",
    "/Users/huanggaole/PCGZelda/src/map/EnemyFactory.ts",
    "/Users/huanggaole/PCGZelda/src/map/BulletFactory.ts",
    "/Users/huanggaole/PCGZelda/src/bullet/PlayerArrow.ts",
    "/Users/huanggaole/PCGZelda/src/scene/BattleScene.ts",
    "/Users/huanggaole/PCGZelda/src/script/Node.ts"
  ]
}

{
  "code": "export var NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"S\"] = 0] = \"S\";\r\n    NodeType[NodeType[\"e\"] = 1] = \"e\";\r\n    NodeType[NodeType[\"t\"] = 2] = \"t\";\r\n    NodeType[NodeType[\"b\"] = 3] = \"b\";\r\n    NodeType[NodeType[\"g\"] = 4] = \"g\";\r\n    NodeType[NodeType[\"l\"] = 5] = \"l\";\r\n    NodeType[NodeType[\"k\"] = 6] = \"k\";\r\n    NodeType[NodeType[\"T\"] = 7] = \"T\";\r\n    NodeType[NodeType[\"Any\"] = 8] = \"Any\";\r\n})(NodeType || (NodeType = {}));\r\nexport default class Node {\r\n    constructor(_index, _type, _pointto, _keyto = []) {\r\n        this.index = _index;\r\n        this.type = _type;\r\n        this.pointTo = _pointto;\r\n        this.candidates = [];\r\n        this.keyTo = _keyto;\r\n        let x = -1;\r\n        let y = -1;\r\n        this.PlaceinGrid = { x, y };\r\n    }\r\n    ifcandidate(node) {\r\n        if (node.type == this.type) {\r\n            for (let i = 0; i < this.countTypeNum.length; i++) {\r\n                if (this.countTypeNum[i] > node.countTypeNum[i]) {\r\n                    return;\r\n                }\r\n            }\r\n            this.candidates.push(node.index);\r\n        }\r\n    }\r\n}\r\n",
  "references": []
}

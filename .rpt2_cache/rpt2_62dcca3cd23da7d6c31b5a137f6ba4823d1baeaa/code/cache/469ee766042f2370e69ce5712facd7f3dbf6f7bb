{
  "code": "import Node, { NodeType } from \"./Node\";\r\nexport default class Graphic {\r\n    constructor() {\r\n        this.NodeName = [\"A\", \"B\", \"C\", \"D\"];\r\n        this.nodes = [];\r\n    }\r\n    test1() {\r\n        let A = new Node(0, NodeType.A, [1, 3]);\r\n        let B = new Node(1, NodeType.B, []);\r\n        let C = new Node(2, NodeType.C, [4]);\r\n        let B2 = new Node(3, NodeType.B, [2]);\r\n        let D = new Node(4, NodeType.D, [0]);\r\n        this.nodes = [];\r\n        this.nodes.push(A);\r\n        this.nodes.push(B);\r\n        this.nodes.push(C);\r\n        this.nodes.push(B2);\r\n        this.nodes.push(D);\r\n        this.startNode = A;\r\n    }\r\n    printGraphic() {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            console.log(this.nodes[i].index + this.NodeName[this.nodes[i].type] + \"->\");\r\n            for (let j = 0; j < this.nodes[i].pointTo.length; j++) {\r\n                console.log(this.nodes[i].pointTo[j] + this.NodeName[this.nodes[this.nodes[i].pointTo[j]].type]);\r\n            }\r\n        }\r\n    }\r\n    checkPreNode(thisindex, preindex, pre, findres) {\r\n        console.log(thisindex, preindex);\r\n        this.nodes[thisindex].tempindex = pre.nodes[preindex].index;\r\n        pre.nodes[preindex].tempindex = this.nodes[thisindex].index;\r\n        let thispointto = this.nodes[thisindex].pointTo;\r\n        let prepointto = pre.nodes[preindex].pointTo;\r\n        let iffound = true;\r\n        for (let i = 0; i < prepointto.length; i++) {\r\n            iffound = false;\r\n            for (let j = 0; j < thispointto.length; j++) {\r\n                let prenode = pre.nodes[prepointto[i]];\r\n                let thisnode = this.nodes[thispointto[j]];\r\n                if (prenode.type == thisnode.type) {\r\n                    iffound = this.checkPreNode(thisnode.index, prenode.index, pre, findres);\r\n                }\r\n            }\r\n            if (iffound == false) {\r\n                console.log(\"false\");\r\n                findres = findres.filter(item => item[preindex] != thisindex);\r\n                pre.nodes[preindex].tempindex = -1;\r\n                console.log(findres);\r\n                return false;\r\n            }\r\n        }\r\n        if (iffound) {\r\n            let res = [];\r\n            for (let i = 0; i < pre.nodes.length; i++) {\r\n                if (pre.nodes[i].tempindex == -1) {\r\n                    return iffound;\r\n                }\r\n                res.push(pre.nodes[i].tempindex);\r\n            }\r\n            let ifrepeated = false;\r\n            for (let i = 0; i < findres.length; i++) {\r\n                for (let j = 0; j < pre.nodes.length; j++) {\r\n                    if (findres[i][j] != res[j]) {\r\n                        break;\r\n                    }\r\n                    if (j == pre.nodes.length - 1) {\r\n                        ifrepeated = true;\r\n                    }\r\n                }\r\n                if (ifrepeated) {\r\n                    break;\r\n                }\r\n            }\r\n            if (ifrepeated == false) {\r\n                findres.push(res);\r\n            }\r\n            console.log(findres);\r\n        }\r\n        return iffound;\r\n    }\r\n    findPre(pre) {\r\n        let findres = [];\r\n        for (let i = 0; i < pre.nodes.length; i++) {\r\n            pre.nodes[i].tempindex = -1;\r\n        }\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].type == pre.nodes[0].type) {\r\n                let res = this.checkPreNode(i, 0, pre, findres);\r\n                console.log(res);\r\n                console.log(findres);\r\n                console.log(pre);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "/Users/huanggaole/FanErSai/src/graphic/Node.ts"
  ]
}

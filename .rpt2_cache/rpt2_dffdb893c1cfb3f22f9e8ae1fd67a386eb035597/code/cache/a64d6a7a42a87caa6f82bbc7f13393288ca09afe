{
  "code": "import Map from \"./script/Map\";\r\nimport GameConfig from \"./myGameConfig\";\r\nimport { RegionType } from \"./script/Region\";\r\nimport { NodeType } from \"./script/Node\";\r\nclass Main {\r\n    constructor() {\r\n        if (window[\"Laya3D\"])\r\n            Laya3D.init(GameConfig.width, GameConfig.height);\r\n        else\r\n            Laya.init(GameConfig.width, GameConfig.height, Laya[\"WebGL\"]);\r\n        Laya[\"Physics\"] && Laya[\"Physics\"].enable();\r\n        Laya[\"DebugPanel\"] && Laya[\"DebugPanel\"].enable();\r\n        Laya.stage.scaleMode = GameConfig.scaleMode;\r\n        Laya.stage.screenMode = GameConfig.screenMode;\r\n        Laya.stage.alignV = GameConfig.alignV;\r\n        Laya.stage.alignH = GameConfig.alignH;\r\n        Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;\r\n        if (GameConfig.debug || Laya.Utils.getQueryString(\"debug\") == \"true\")\r\n            Laya.enableDebugPanel();\r\n        if (GameConfig.physicsDebug && Laya[\"PhysicsDebugDraw\"])\r\n            Laya[\"PhysicsDebugDraw\"].enable();\r\n        if (GameConfig.stat)\r\n            Laya.Stat.show();\r\n        Laya.ResourceVersion.enable(\"version.json\", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);\r\n    }\r\n    onVersionLoaded() {\r\n        Laya.AtlasInfoManager.enable(\"fileconfig.json\", Laya.Handler.create(this, this.onConfigLoaded));\r\n    }\r\n    onConfigLoaded() {\r\n        let map = Map.generateWorld();\r\n        while (map.length == 0) {\r\n            map = Map.generateWorld();\r\n        }\r\n        console.log(map);\r\n        let MapScene = new Laya.Scene();\r\n        Laya.stage.addChild(MapScene);\r\n        let MapImage = new Laya.Image();\r\n        MapScene.addChild(MapImage);\r\n        let width = map[0].length;\r\n        let height = map.length;\r\n        let gridwidth = 60;\r\n        let gridheight = 30;\r\n        let marginwidth = 10;\r\n        let marginheight = 5;\r\n        MapScene.width = MapImage.width = gridwidth * width;\r\n        MapScene.height = MapImage.height = 20 * height;\r\n        for (let j = 0; j < height; j++) {\r\n            for (let i = 0; i < width; i++) {\r\n                if (map[j][i] == null) {\r\n                    MapImage.graphics.drawRect(i * gridwidth, j * gridheight, gridwidth, gridheight, \"#0000ff\", \"#0000ff\");\r\n                }\r\n                else {\r\n                    let tmpmap = map[j][i];\r\n                    let groundcolor = \"#00ff00\";\r\n                    let barriercolor = \"#00cc00\";\r\n                    if (tmpmap.regiontype == RegionType.Snow) {\r\n                        groundcolor = \"#ffffff\";\r\n                        barriercolor = \"#cccccc\";\r\n                    }\r\n                    else if (tmpmap.regiontype == RegionType.Desert) {\r\n                        groundcolor = \"#ffff00\";\r\n                        barriercolor = \"#cccc00\";\r\n                    }\r\n                    else if (tmpmap.regiontype == RegionType.Lava) {\r\n                        groundcolor = \"#9f8f8f\";\r\n                        barriercolor = \"#0c0c0c\";\r\n                    }\r\n                    MapImage.graphics.drawRect(i * gridwidth, j * gridheight, gridwidth, gridheight, groundcolor, groundcolor);\r\n                    if (tmpmap.upConnect) {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight, marginwidth, marginheight, barriercolor, barriercolor);\r\n                        MapImage.graphics.drawRect(i * gridwidth + (gridwidth - marginwidth), j * gridheight, marginwidth, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    else {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight, gridwidth, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    if (tmpmap.downConnect) {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight + (gridheight - marginheight), marginwidth, marginheight, barriercolor, barriercolor);\r\n                        MapImage.graphics.drawRect(i * gridwidth + (gridwidth - marginwidth), j * gridheight + (gridheight - marginheight), marginwidth, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    else {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight + (gridheight - marginheight), gridwidth, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    if (tmpmap.leftConnect) {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight, marginheight, marginheight, barriercolor, barriercolor);\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight + (gridheight - marginheight), marginheight, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    else {\r\n                        MapImage.graphics.drawRect(i * gridwidth, j * gridheight, marginheight, gridheight, barriercolor, barriercolor);\r\n                    }\r\n                    if (tmpmap.rightConnect) {\r\n                        MapImage.graphics.drawRect(i * gridwidth + (gridwidth - marginheight), j * gridheight, marginheight, marginheight, barriercolor, barriercolor);\r\n                        MapImage.graphics.drawRect(i * gridwidth + (gridwidth - marginheight), j * gridheight + (gridheight - marginheight), marginheight, marginheight, barriercolor, barriercolor);\r\n                    }\r\n                    else {\r\n                        MapImage.graphics.drawRect(i * gridwidth + (gridwidth - marginheight), j * gridheight, marginheight, gridheight, barriercolor, barriercolor);\r\n                    }\r\n                    if (tmpmap.node.type == NodeType.e) {\r\n                        MapImage.graphics.fillText(\"ðŸ¦¸\", i * gridwidth + gridwidth / 2.0, j * gridheight + gridheight * 0.3, \"20px Arial\", \"#000000\", \"center\");\r\n                    }\r\n                    if (tmpmap.node.type == NodeType.b) {\r\n                        MapImage.graphics.fillText(\"ðŸ‘¹\", i * gridwidth + gridwidth / 2.0, j * gridheight + gridheight * 0.3, \"20px Arial\", \"#000000\", \"center\");\r\n                    }\r\n                    if (tmpmap.node.type == NodeType.g) {\r\n                        MapImage.graphics.fillText(\"ðŸ‘¸\", i * gridwidth + gridwidth / 2.0, j * gridheight + gridheight * 0.3, \"20px Arial\", \"#000000\", \"center\");\r\n                    }\r\n                    if (tmpmap.node.type == NodeType.k) {\r\n                        MapImage.graphics.fillText(\"ðŸ”‘\" + tmpmap.node.keyTo[0], i * gridwidth + gridwidth / 2.0, j * gridheight + gridheight * 0.3, \"20px Arial\", \"#000000\", \"center\");\r\n                    }\r\n                    if (tmpmap.node.type == NodeType.l) {\r\n                        MapImage.graphics.fillText(\"ðŸ”’\" + tmpmap.node.index, i * gridwidth + gridwidth / 2.0, j * gridheight + gridheight * 0.3, \"20px Arial\", \"#000000\", \"center\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nnew Main();\r\n",
  "references": [
    "/Users/huanggaole/PCGZelda/src/script/Map.ts",
    "/Users/huanggaole/PCGZelda/src/myGameConfig.ts",
    "/Users/huanggaole/PCGZelda/src/script/Region.ts",
    "/Users/huanggaole/PCGZelda/src/script/Node.ts"
  ]
}

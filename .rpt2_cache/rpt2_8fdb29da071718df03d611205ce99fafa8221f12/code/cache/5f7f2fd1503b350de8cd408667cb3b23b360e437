{
  "code": "import Graphic from \"./Graphic\";\r\nimport Node, { NodeType } from \"./Node\";\r\nexport default class Rules {\r\n    static initRules() {\r\n        this.startpre = new Graphic();\r\n        this.startnew = new Graphic();\r\n        this.addpre = new Graphic();\r\n        this.add1new = new Graphic();\r\n        this.add2new = new Graphic();\r\n        this.add3new = new Graphic();\r\n        this.defineT1new = new Graphic();\r\n        this.defineT2new = new Graphic();\r\n        this.defineLnew = new Graphic();\r\n        this.startpre.nodes = [new Node(0, NodeType.S, [])];\r\n        this.startnew.nodes = [new Node(0, NodeType.e, [1]), new Node(1, NodeType.T, [2]), new Node(2, NodeType.g, [])];\r\n        this.addpre.nodes = [new Node(0, NodeType.T, [1]), new Node(1, NodeType.g, [])];\r\n        this.add1new.nodes = [new Node(0, NodeType.b, [1]), new Node(1, NodeType.g, [])];\r\n        this.add2new.nodes = [new Node(0, NodeType.T, [1]), new Node(1, NodeType.T, [2]), new Node(2, NodeType.g, [])];\r\n        this.add3new.nodes = [new Node(0, NodeType.T, [1]), new Node(1, NodeType.T, [2]), new Node(2, NodeType.T, [3]), new Node(3, NodeType.g, [])];\r\n    }\r\n    static setDefineT1new(oriG, match) {\r\n        this.defineT1new.nodes = [];\r\n        let node0 = new Node(0, oriG.nodes[match[0]].type, [1]);\r\n        let node1 = new Node(1, NodeType.t, [2]);\r\n        let node2 = new Node(2, oriG.nodes[match[2]].type, []);\r\n        this.defineT1new.nodes = [node0, node1, node2];\r\n    }\r\n    static setDefineT2new(oriG, match) {\r\n        this.defineT2new.nodes = [];\r\n        let node0 = new Node(0, oriG.nodes[match[0]].type, [1, 3]);\r\n        let node1 = new Node(1, NodeType.l, [2]);\r\n        let node2 = new Node(2, oriG.nodes[match[2]].type, []);\r\n        let node3 = new Node(3, NodeType.k, [], [1]);\r\n        this.defineT2new.nodes = [node0, node1, node2, node3];\r\n    }\r\n    static setDefineLnew(oriG, match) {\r\n        this.defineLnew.nodes = [];\r\n        let node0 = new Node(0, oriG.nodes[match[0]].type, [1, 2]);\r\n        let node1 = new Node(1, oriG.nodes[match[1]].type, []);\r\n        let node2 = new Node(2, oriG.nodes[match[2]].type, []);\r\n        this.defineLnew.nodes = [node0, node1, node2];\r\n    }\r\n}\r\n",
  "references": [
    "/Users/huanggaole/FanErSai/src/script/Graphic.ts",
    "/Users/huanggaole/FanErSai/src/script/Node.ts"
  ]
}
